// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	domain "opensea/internal/domain"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockOpenseaRepositoryContract is a mock of OpenseaRepositoryContract interface.
type MockOpenseaRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockOpenseaRepositoryContractMockRecorder
}

// MockOpenseaRepositoryContractMockRecorder is the mock recorder for MockOpenseaRepositoryContract.
type MockOpenseaRepositoryContractMockRecorder struct {
	mock *MockOpenseaRepositoryContract
}

// NewMockOpenseaRepositoryContract creates a new mock instance.
func NewMockOpenseaRepositoryContract(ctrl *gomock.Controller) *MockOpenseaRepositoryContract {
	mock := &MockOpenseaRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockOpenseaRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenseaRepositoryContract) EXPECT() *MockOpenseaRepositoryContractMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockOpenseaRepositoryContract) Buy(ctx context.Context, buyer, creator *domain.StreamingPlatform, coCreators []*domain.StreamingPlatform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", ctx, buyer, creator, coCreators)
	ret0, _ := ret[0].(error)
	return ret0
}

// Buy indicates an expected call of Buy.
func (mr *MockOpenseaRepositoryContractMockRecorder) Buy(ctx, buyer, creator, coCreators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).Buy), ctx, buyer, creator, coCreators)
}

// GetAllMovie mocks base method.
func (m *MockOpenseaRepositoryContract) GetAllMovie(ctx context.Context, page int) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovie", ctx, page)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMovie indicates an expected call of GetAllMovie.
func (mr *MockOpenseaRepositoryContractMockRecorder) GetAllMovie(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovie", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).GetAllMovie), ctx, page)
}

// GetMovieById mocks base method.
func (m *MockOpenseaRepositoryContract) GetMovieById(ctx context.Context, movieId int64) (*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieById", ctx, movieId)
	ret0, _ := ret[0].(*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieById indicates an expected call of GetMovieById.
func (mr *MockOpenseaRepositoryContractMockRecorder) GetMovieById(ctx, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieById", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).GetMovieById), ctx, movieId)
}

// GetStreamingPlatformById mocks base method.
func (m *MockOpenseaRepositoryContract) GetStreamingPlatformById(ctx context.Context, userId int64) (*domain.StreamingPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingPlatformById", ctx, userId)
	ret0, _ := ret[0].(*domain.StreamingPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingPlatformById indicates an expected call of GetStreamingPlatformById.
func (mr *MockOpenseaRepositoryContractMockRecorder) GetStreamingPlatformById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingPlatformById", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).GetStreamingPlatformById), ctx, userId)
}

// InsertMovie mocks base method.
func (m *MockOpenseaRepositoryContract) InsertMovie(ctx *gin.Context, movie *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMovie", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMovie indicates an expected call of InsertMovie.
func (mr *MockOpenseaRepositoryContractMockRecorder) InsertMovie(ctx, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMovie", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).InsertMovie), ctx, movie)
}

// UpdateMovie mocks base method.
func (m *MockOpenseaRepositoryContract) UpdateMovie(ctx context.Context, movie *domain.Movie) (*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, movie)
	ret0, _ := ret[0].(*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockOpenseaRepositoryContractMockRecorder) UpdateMovie(ctx, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).UpdateMovie), ctx, movie)
}

// UpdateStreamingPlatform mocks base method.
func (m *MockOpenseaRepositoryContract) UpdateStreamingPlatform(ctx context.Context, user *domain.StreamingPlatform) (*domain.StreamingPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingPlatform", ctx, user)
	ret0, _ := ret[0].(*domain.StreamingPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingPlatform indicates an expected call of UpdateStreamingPlatform.
func (mr *MockOpenseaRepositoryContractMockRecorder) UpdateStreamingPlatform(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingPlatform", reflect.TypeOf((*MockOpenseaRepositoryContract)(nil).UpdateStreamingPlatform), ctx, user)
}
